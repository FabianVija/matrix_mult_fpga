

================================================================
== Vivado HLS Report for 'matrix_mult'
================================================================
* Date:           Tue Sep 18 11:26:20 2018

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        matrix_mult_prj
* Solution:       solution3
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   5.00|     4.170|        0.62|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   83|   83|   83|   83|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------+-----+-----+----------+-----------+-----------+------+----------+
        |           |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Row_Col  |   81|   81|        10|          3|          1|    25|    yes   |
        +-----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 3, depth = 10


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 12
* Pipeline : 1
  Pipeline-0 : II = 3, D = 10, States = { 2 3 4 5 6 7 8 9 10 11 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	12  / (exitcond_flatten)
	3  / (!exitcond_flatten)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	2  / true
12 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([25 x i8]* %a) nounwind, !map !7"   --->   Operation 13 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([25 x i8]* %b) nounwind, !map !13"   --->   Operation 14 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([25 x i16]* %prod) nounwind, !map !17"   --->   Operation 15 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([12 x i8]* @matrix_mult_str) nounwind"   --->   Operation 16 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (1.76ns)   --->   "br label %1" [matrix_mult.cpp:10]   --->   Operation 17 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 2.63>
ST_2 : Operation 18 [1/1] (0.00ns)   --->   "%indvar_flatten = phi i5 [ 0, %0 ], [ %indvar_flatten_next, %.reset ]"   --->   Operation 18 'phi' 'indvar_flatten' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "%i = phi i3 [ 0, %0 ], [ %tmp_mid2_v, %.reset ]" [matrix_mult.cpp:13]   --->   Operation 19 'phi' 'i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "%j = phi i3 [ 0, %0 ], [ %j_1, %.reset ]"   --->   Operation 20 'phi' 'j' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 21 [1/1] (1.36ns)   --->   "%exitcond_flatten = icmp eq i5 %indvar_flatten, -7"   --->   Operation 21 'icmp' 'exitcond_flatten' <Predicate = true> <Delay = 1.36> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 25, i64 25, i64 25) nounwind"   --->   Operation 22 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 23 [1/1] (1.78ns)   --->   "%indvar_flatten_next = add i5 %indvar_flatten, 1"   --->   Operation 23 'add' 'indvar_flatten_next' <Predicate = true> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "br i1 %exitcond_flatten, label %2, label %.reset"   --->   Operation 24 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (1.65ns)   --->   "%i_1 = add i3 %i, 1" [matrix_mult.cpp:10]   --->   Operation 25 'add' 'i_1' <Predicate = (!exitcond_flatten)> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (1.13ns)   --->   "%exitcond = icmp eq i3 %j, -3" [matrix_mult.cpp:12]   --->   Operation 26 'icmp' 'exitcond' <Predicate = (!exitcond_flatten)> <Delay = 1.13> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.13> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 27 [1/1] (0.98ns)   --->   "%j_mid2 = select i1 %exitcond, i3 0, i3 %j" [matrix_mult.cpp:12]   --->   Operation 27 'select' 'j_mid2' <Predicate = (!exitcond_flatten)> <Delay = 0.98> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_2 : Operation 28 [1/1] (0.98ns)   --->   "%tmp_mid2_v = select i1 %exitcond, i3 %i_1, i3 %i" [matrix_mult.cpp:13]   --->   Operation 28 'select' 'tmp_mid2_v' <Predicate = (!exitcond_flatten)> <Delay = 0.98> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.98> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>

State 3 <SV = 2> <Delay = 4.10>
ST_3 : Operation 29 [1/1] (0.00ns)   --->   "%tmp_mid2_cast = zext i3 %tmp_mid2_v to i6" [matrix_mult.cpp:13]   --->   Operation 29 'zext' 'tmp_mid2_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 30 [1/1] (0.00ns)   --->   "%tmp = call i5 @_ssdm_op_BitConcatenate.i5.i3.i2(i3 %tmp_mid2_v, i2 0)" [matrix_mult.cpp:13]   --->   Operation 30 'bitconcatenate' 'tmp' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "%p_shl_cast = zext i5 %tmp to i6" [matrix_mult.cpp:16]   --->   Operation 31 'zext' 'p_shl_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 32 [1/1] (1.78ns)   --->   "%tmp_1 = add i6 %tmp_mid2_cast, %p_shl_cast" [matrix_mult.cpp:16]   --->   Operation 32 'add' 'tmp_1' <Predicate = (!exitcond_flatten)> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "%tmp_1_cast = zext i6 %tmp_1 to i64" [matrix_mult.cpp:16]   --->   Operation 33 'zext' 'tmp_1_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 34 [1/1] (0.00ns)   --->   "%a_addr = getelementptr [25 x i8]* %a, i64 0, i64 %tmp_1_cast" [matrix_mult.cpp:16]   --->   Operation 34 'getelementptr' 'a_addr' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 35 [1/1] (0.00ns)   --->   "%tmp_2_cast3 = zext i3 %j_mid2 to i5" [matrix_mult.cpp:16]   --->   Operation 35 'zext' 'tmp_2_cast3' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 36 [1/1] (1.78ns)   --->   "%tmp_12 = add i5 %tmp_2_cast3, 15" [matrix_mult.cpp:16]   --->   Operation 36 'add' 'tmp_12' <Predicate = (!exitcond_flatten)> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "%tmp_13_cast = zext i5 %tmp_12 to i64" [matrix_mult.cpp:16]   --->   Operation 37 'zext' 'tmp_13_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 38 [1/1] (0.00ns)   --->   "%b_addr_3 = getelementptr [25 x i8]* %b, i64 0, i64 %tmp_13_cast" [matrix_mult.cpp:16]   --->   Operation 38 'getelementptr' 'b_addr_3' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 39 [1/1] (1.78ns)   --->   "%tmp_13 = add i5 %tmp_2_cast3, -12" [matrix_mult.cpp:16]   --->   Operation 39 'add' 'tmp_13' <Predicate = (!exitcond_flatten)> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 40 [1/1] (0.00ns)   --->   "%tmp_14_cast = zext i5 %tmp_13 to i64" [matrix_mult.cpp:16]   --->   Operation 40 'zext' 'tmp_14_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 41 [1/1] (0.00ns)   --->   "%b_addr_4 = getelementptr [25 x i8]* %b, i64 0, i64 %tmp_14_cast" [matrix_mult.cpp:16]   --->   Operation 41 'getelementptr' 'b_addr_4' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_3 : Operation 42 [2/2] (2.32ns)   --->   "%a_load = load i8* %a_addr, align 1" [matrix_mult.cpp:16]   --->   Operation 42 'load' 'a_load' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_3 : Operation 43 [2/2] (2.32ns)   --->   "%b_load_3 = load i8* %b_addr_3, align 1" [matrix_mult.cpp:16]   --->   Operation 43 'load' 'b_load_3' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_3 : Operation 44 [2/2] (2.32ns)   --->   "%b_load_4 = load i8* %b_addr_4, align 1" [matrix_mult.cpp:16]   --->   Operation 44 'load' 'b_load_4' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>

State 4 <SV = 3> <Delay = 4.14>
ST_4 : Operation 45 [1/1] (1.82ns)   --->   "%tmp_9 = add i6 %tmp_1, 3" [matrix_mult.cpp:16]   --->   Operation 45 'add' 'tmp_9' <Predicate = (!exitcond_flatten)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 46 [1/1] (0.00ns)   --->   "%tmp_9_cast = sext i6 %tmp_9 to i64" [matrix_mult.cpp:16]   --->   Operation 46 'sext' 'tmp_9_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 47 [1/1] (0.00ns)   --->   "%a_addr_3 = getelementptr [25 x i8]* %a, i64 0, i64 %tmp_9_cast" [matrix_mult.cpp:16]   --->   Operation 47 'getelementptr' 'a_addr_3' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 48 [1/1] (1.82ns)   --->   "%tmp_s = add i6 %tmp_1, 4" [matrix_mult.cpp:16]   --->   Operation 48 'add' 'tmp_s' <Predicate = (!exitcond_flatten)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 49 [1/1] (0.00ns)   --->   "%tmp_10_cast = sext i6 %tmp_s to i64" [matrix_mult.cpp:16]   --->   Operation 49 'sext' 'tmp_10_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 50 [1/1] (0.00ns)   --->   "%a_addr_4 = getelementptr [25 x i8]* %a, i64 0, i64 %tmp_10_cast" [matrix_mult.cpp:16]   --->   Operation 50 'getelementptr' 'a_addr_4' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 51 [1/1] (0.00ns)   --->   "%tmp_2 = zext i3 %j_mid2 to i64" [matrix_mult.cpp:13]   --->   Operation 51 'zext' 'tmp_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 52 [1/1] (0.00ns)   --->   "%tmp_2_cast = zext i3 %j_mid2 to i4" [matrix_mult.cpp:16]   --->   Operation 52 'zext' 'tmp_2_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 53 [1/1] (0.00ns)   --->   "%b_addr = getelementptr [25 x i8]* %b, i64 0, i64 %tmp_2" [matrix_mult.cpp:16]   --->   Operation 53 'getelementptr' 'b_addr' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 54 [1/1] (1.73ns)   --->   "%tmp_10 = add i4 %tmp_2_cast, 5" [matrix_mult.cpp:16]   --->   Operation 54 'add' 'tmp_10' <Predicate = (!exitcond_flatten)> <Delay = 1.73> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 55 [1/1] (0.00ns)   --->   "%tmp_11_cast = zext i4 %tmp_10 to i64" [matrix_mult.cpp:16]   --->   Operation 55 'zext' 'tmp_11_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 56 [1/1] (0.00ns)   --->   "%b_addr_1 = getelementptr [25 x i8]* %b, i64 0, i64 %tmp_11_cast" [matrix_mult.cpp:16]   --->   Operation 56 'getelementptr' 'b_addr_1' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_4 : Operation 57 [1/2] (2.32ns)   --->   "%a_load = load i8* %a_addr, align 1" [matrix_mult.cpp:16]   --->   Operation 57 'load' 'a_load' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_4 : Operation 58 [2/2] (2.32ns)   --->   "%b_load = load i8* %b_addr, align 1" [matrix_mult.cpp:16]   --->   Operation 58 'load' 'b_load' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_4 : Operation 59 [2/2] (2.32ns)   --->   "%b_load_1 = load i8* %b_addr_1, align 1" [matrix_mult.cpp:16]   --->   Operation 59 'load' 'b_load_1' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_4 : Operation 60 [2/2] (2.32ns)   --->   "%a_load_3 = load i8* %a_addr_3, align 1" [matrix_mult.cpp:16]   --->   Operation 60 'load' 'a_load_3' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_4 : Operation 61 [1/2] (2.32ns)   --->   "%b_load_3 = load i8* %b_addr_3, align 1" [matrix_mult.cpp:16]   --->   Operation 61 'load' 'b_load_3' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_4 : Operation 62 [2/2] (2.32ns)   --->   "%a_load_4 = load i8* %a_addr_4, align 1" [matrix_mult.cpp:16]   --->   Operation 62 'load' 'a_load_4' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_4 : Operation 63 [1/2] (2.32ns)   --->   "%b_load_4 = load i8* %b_addr_4, align 1" [matrix_mult.cpp:16]   --->   Operation 63 'load' 'b_load_4' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_4 : Operation 64 [1/1] (1.65ns)   --->   "%j_1 = add i3 %j_mid2, 1" [matrix_mult.cpp:12]   --->   Operation 64 'add' 'j_1' <Predicate = (!exitcond_flatten)> <Delay = 1.65> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 5 <SV = 4> <Delay = 4.14>
ST_5 : Operation 65 [1/1] (1.82ns)   --->   "%tmp_4 = add i6 %tmp_1, 1" [matrix_mult.cpp:16]   --->   Operation 65 'add' 'tmp_4' <Predicate = (!exitcond_flatten)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 66 [1/1] (0.00ns)   --->   "%tmp_4_cast = zext i6 %tmp_4 to i64" [matrix_mult.cpp:16]   --->   Operation 66 'zext' 'tmp_4_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 67 [1/1] (0.00ns)   --->   "%a_addr_1 = getelementptr [25 x i8]* %a, i64 0, i64 %tmp_4_cast" [matrix_mult.cpp:16]   --->   Operation 67 'getelementptr' 'a_addr_1' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 68 [1/1] (1.82ns)   --->   "%tmp_8 = add i6 %tmp_1, 2" [matrix_mult.cpp:16]   --->   Operation 68 'add' 'tmp_8' <Predicate = (!exitcond_flatten)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 69 [1/1] (0.00ns)   --->   "%tmp_8_cast = sext i6 %tmp_8 to i64" [matrix_mult.cpp:16]   --->   Operation 69 'sext' 'tmp_8_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 70 [1/1] (0.00ns)   --->   "%a_addr_2 = getelementptr [25 x i8]* %a, i64 0, i64 %tmp_8_cast" [matrix_mult.cpp:16]   --->   Operation 70 'getelementptr' 'a_addr_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 71 [1/1] (0.00ns)   --->   "%tmp_2_cast4 = zext i3 %j_mid2 to i6" [matrix_mult.cpp:16]   --->   Operation 71 'zext' 'tmp_2_cast4' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 72 [1/1] (1.78ns)   --->   "%tmp_11 = add i5 %tmp_2_cast3, 10" [matrix_mult.cpp:16]   --->   Operation 72 'add' 'tmp_11' <Predicate = (!exitcond_flatten)> <Delay = 1.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 73 [1/1] (0.00ns)   --->   "%tmp_12_cast = zext i5 %tmp_11 to i64" [matrix_mult.cpp:16]   --->   Operation 73 'zext' 'tmp_12_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 74 [1/1] (0.00ns)   --->   "%b_addr_2 = getelementptr [25 x i8]* %b, i64 0, i64 %tmp_12_cast" [matrix_mult.cpp:16]   --->   Operation 74 'getelementptr' 'b_addr_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 75 [1/1] (1.82ns)   --->   "%tmp_14 = add i6 %tmp_1, %tmp_2_cast4" [matrix_mult.cpp:13]   --->   Operation 75 'add' 'tmp_14' <Predicate = (!exitcond_flatten)> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 76 [1/2] (2.32ns)   --->   "%b_load = load i8* %b_addr, align 1" [matrix_mult.cpp:16]   --->   Operation 76 'load' 'b_load' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_5 : Operation 77 [2/2] (2.32ns)   --->   "%a_load_1 = load i8* %a_addr_1, align 1" [matrix_mult.cpp:16]   --->   Operation 77 'load' 'a_load_1' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_5 : Operation 78 [1/2] (2.32ns)   --->   "%b_load_1 = load i8* %b_addr_1, align 1" [matrix_mult.cpp:16]   --->   Operation 78 'load' 'b_load_1' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_5 : Operation 79 [2/2] (2.32ns)   --->   "%a_load_2 = load i8* %a_addr_2, align 1" [matrix_mult.cpp:16]   --->   Operation 79 'load' 'a_load_2' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_5 : Operation 80 [2/2] (2.32ns)   --->   "%b_load_2 = load i8* %b_addr_2, align 1" [matrix_mult.cpp:16]   --->   Operation 80 'load' 'b_load_2' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_5 : Operation 81 [1/2] (2.32ns)   --->   "%a_load_3 = load i8* %a_addr_3, align 1" [matrix_mult.cpp:16]   --->   Operation 81 'load' 'a_load_3' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_5 : Operation 82 [1/1] (0.00ns)   --->   "%tmp_5_3 = sext i8 %a_load_3 to i16" [matrix_mult.cpp:16]   --->   Operation 82 'sext' 'tmp_5_3' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 83 [1/1] (0.00ns)   --->   "%tmp_6_3 = sext i8 %b_load_3 to i16" [matrix_mult.cpp:16]   --->   Operation 83 'sext' 'tmp_6_3' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_5 : Operation 84 [3/3] (1.05ns)   --->   "%tmp_7_3 = mul i16 %tmp_6_3, %tmp_5_3" [matrix_mult.cpp:16]   --->   Operation 84 'mul' 'tmp_7_3' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 85 [1/2] (2.32ns)   --->   "%a_load_4 = load i8* %a_addr_4, align 1" [matrix_mult.cpp:16]   --->   Operation 85 'load' 'a_load_4' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>

State 6 <SV = 5> <Delay = 4.17>
ST_6 : Operation 86 [1/2] (2.32ns)   --->   "%a_load_1 = load i8* %a_addr_1, align 1" [matrix_mult.cpp:16]   --->   Operation 86 'load' 'a_load_1' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_6 : Operation 87 [1/1] (0.00ns)   --->   "%tmp_5_1 = sext i8 %a_load_1 to i16" [matrix_mult.cpp:16]   --->   Operation 87 'sext' 'tmp_5_1' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_6 : Operation 88 [1/1] (0.00ns)   --->   "%tmp_6_1 = sext i8 %b_load_1 to i16" [matrix_mult.cpp:16]   --->   Operation 88 'sext' 'tmp_6_1' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_6 : Operation 89 [3/3] (1.05ns)   --->   "%tmp_7_1 = mul i16 %tmp_6_1, %tmp_5_1" [matrix_mult.cpp:16]   --->   Operation 89 'mul' 'tmp_7_1' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 90 [1/2] (2.32ns)   --->   "%a_load_2 = load i8* %a_addr_2, align 1" [matrix_mult.cpp:16]   --->   Operation 90 'load' 'a_load_2' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_6 : Operation 91 [1/2] (2.32ns)   --->   "%b_load_2 = load i8* %b_addr_2, align 1" [matrix_mult.cpp:16]   --->   Operation 91 'load' 'b_load_2' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_6 : Operation 92 [2/3] (1.05ns)   --->   "%tmp_7_3 = mul i16 %tmp_6_3, %tmp_5_3" [matrix_mult.cpp:16]   --->   Operation 92 'mul' 'tmp_7_3' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 93 [1/1] (0.00ns)   --->   "%tmp_5_4 = sext i8 %a_load_4 to i16" [matrix_mult.cpp:16]   --->   Operation 93 'sext' 'tmp_5_4' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_6 : Operation 94 [1/1] (0.00ns)   --->   "%tmp_6_4 = sext i8 %b_load_4 to i16" [matrix_mult.cpp:16]   --->   Operation 94 'sext' 'tmp_6_4' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_6 : Operation 95 [1/1] (4.17ns)   --->   "%tmp_7_4 = mul i16 %tmp_6_4, %tmp_5_4" [matrix_mult.cpp:16]   --->   Operation 95 'mul' 'tmp_7_4' <Predicate = (!exitcond_flatten)> <Delay = 4.17> <Core = "Mul">   --->   Core 16 'Mul' <Latency = 0> <II = 1> <Delay = 4.17> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>

State 7 <SV = 6> <Delay = 4.17>
ST_7 : Operation 96 [1/1] (0.00ns)   --->   "%tmp_5 = sext i8 %a_load to i16" [matrix_mult.cpp:16]   --->   Operation 96 'sext' 'tmp_5' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_7 : Operation 97 [1/1] (0.00ns)   --->   "%tmp_6 = sext i8 %b_load to i16" [matrix_mult.cpp:16]   --->   Operation 97 'sext' 'tmp_6' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_7 : Operation 98 [1/1] (4.17ns)   --->   "%tmp_7 = mul i16 %tmp_6, %tmp_5" [matrix_mult.cpp:16]   --->   Operation 98 'mul' 'tmp_7' <Predicate = (!exitcond_flatten)> <Delay = 4.17> <Core = "Mul">   --->   Core 16 'Mul' <Latency = 0> <II = 1> <Delay = 4.17> <FuncUnit> <Opcode : 'mul'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 99 [2/3] (1.05ns)   --->   "%tmp_7_1 = mul i16 %tmp_6_1, %tmp_5_1" [matrix_mult.cpp:16]   --->   Operation 99 'mul' 'tmp_7_1' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 100 [1/1] (0.00ns)   --->   "%tmp_5_2 = sext i8 %a_load_2 to i16" [matrix_mult.cpp:16]   --->   Operation 100 'sext' 'tmp_5_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_7 : Operation 101 [1/1] (0.00ns)   --->   "%tmp_6_2 = sext i8 %b_load_2 to i16" [matrix_mult.cpp:16]   --->   Operation 101 'sext' 'tmp_6_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_7 : Operation 102 [3/3] (1.05ns)   --->   "%tmp_7_2 = mul i16 %tmp_6_2, %tmp_5_2" [matrix_mult.cpp:16]   --->   Operation 102 'mul' 'tmp_7_2' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 103 [1/3] (0.00ns)   --->   "%tmp_7_3 = mul i16 %tmp_6_3, %tmp_5_3" [matrix_mult.cpp:16]   --->   Operation 103 'mul' 'tmp_7_3' <Predicate = (!exitcond_flatten)> <Delay = 0.00> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_7 : Operation 104 [1/1] (3.02ns)   --->   "%tmp3 = add i16 %tmp_7_4, %tmp_7_3" [matrix_mult.cpp:16]   --->   Operation 104 'add' 'tmp3' <Predicate = (!exitcond_flatten)> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 8 <SV = 7> <Delay = 3.02>
ST_8 : Operation 105 [1/3] (0.00ns)   --->   "%tmp_7_1 = mul i16 %tmp_6_1, %tmp_5_1" [matrix_mult.cpp:16]   --->   Operation 105 'mul' 'tmp_7_1' <Predicate = (!exitcond_flatten)> <Delay = 0.00> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_8 : Operation 106 [2/3] (1.05ns)   --->   "%tmp_7_2 = mul i16 %tmp_6_2, %tmp_5_2" [matrix_mult.cpp:16]   --->   Operation 106 'mul' 'tmp_7_2' <Predicate = (!exitcond_flatten)> <Delay = 1.05> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_8 : Operation 107 [1/1] (3.02ns)   --->   "%tmp1 = add i16 %tmp_7, %tmp_7_1" [matrix_mult.cpp:16]   --->   Operation 107 'add' 'tmp1' <Predicate = (!exitcond_flatten)> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 9 <SV = 8> <Delay = 3.02>
ST_9 : Operation 108 [1/3] (0.00ns)   --->   "%tmp_7_2 = mul i16 %tmp_6_2, %tmp_5_2" [matrix_mult.cpp:16]   --->   Operation 108 'mul' 'tmp_7_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_9 : Operation 109 [1/1] (3.02ns)   --->   "%tmp2 = add i16 %tmp_7_2, %tmp3" [matrix_mult.cpp:16]   --->   Operation 109 'add' 'tmp2' <Predicate = (!exitcond_flatten)> <Delay = 3.02> <Core = "DSP48">   --->   Core 61 'DSP48' <Latency = 2> <II = 1> <Delay = 3.88> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>

State 10 <SV = 9> <Delay = 2.07>
ST_10 : Operation 110 [1/1] (2.07ns)   --->   "%tmp_8_4 = add i16 %tmp1, %tmp2" [matrix_mult.cpp:16]   --->   Operation 110 'add' 'tmp_8_4' <Predicate = (!exitcond_flatten)> <Delay = 2.07> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.65> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 11 <SV = 10> <Delay = 2.32>
ST_11 : Operation 111 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([8 x i8]* @Row_Col_str)"   --->   Operation 111 'specloopname' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_11 : Operation 112 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str1) nounwind" [matrix_mult.cpp:12]   --->   Operation 112 'specloopname' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_11 : Operation 113 [1/1] (0.00ns)   --->   "%tmp_3 = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str1) nounwind" [matrix_mult.cpp:12]   --->   Operation 113 'specregionbegin' 'tmp_3' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_11 : Operation 114 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str2) nounwind" [matrix_mult.cpp:13]   --->   Operation 114 'specpipeline' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_11 : Operation 115 [1/1] (0.00ns)   --->   "%tmp_15_cast = zext i6 %tmp_14 to i64" [matrix_mult.cpp:13]   --->   Operation 115 'zext' 'tmp_15_cast' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_11 : Operation 116 [1/1] (0.00ns)   --->   "%prod_addr = getelementptr [25 x i16]* %prod, i64 0, i64 %tmp_15_cast" [matrix_mult.cpp:13]   --->   Operation 116 'getelementptr' 'prod_addr' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_11 : Operation 117 [1/1] (2.32ns)   --->   "store i16 %tmp_8_4, i16* %prod_addr, align 2" [matrix_mult.cpp:16]   --->   Operation 117 'store' <Predicate = (!exitcond_flatten)> <Delay = 2.32> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 2.32> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 16> <Depth = 25> <RAM>
ST_11 : Operation 118 [1/1] (0.00ns)   --->   "%empty_2 = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str1, i32 %tmp_3) nounwind" [matrix_mult.cpp:18]   --->   Operation 118 'specregionend' 'empty_2' <Predicate = (!exitcond_flatten)> <Delay = 0.00>
ST_11 : Operation 119 [1/1] (0.00ns)   --->   "br label %1"   --->   Operation 119 'br' <Predicate = (!exitcond_flatten)> <Delay = 0.00>

State 12 <SV = 2> <Delay = 0.00>
ST_12 : Operation 120 [1/1] (0.00ns)   --->   "ret void" [matrix_mult.cpp:21]   --->   Operation 120 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 5ns, clock uncertainty: 0.625ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('indvar_flatten') with incoming values : ('indvar_flatten_next') [10]  (1.77 ns)

 <State 2>: 2.63ns
The critical path consists of the following:
	'phi' operation ('i', matrix_mult.cpp:13) with incoming values : ('tmp_mid2_v', matrix_mult.cpp:13) [11]  (0 ns)
	'add' operation ('i', matrix_mult.cpp:10) [18]  (1.65 ns)
	'select' operation ('tmp_mid2_v', matrix_mult.cpp:13) [22]  (0.98 ns)

 <State 3>: 4.1ns
The critical path consists of the following:
	'add' operation ('tmp_1', matrix_mult.cpp:16) [26]  (1.78 ns)
	'getelementptr' operation ('a_addr', matrix_mult.cpp:16) [28]  (0 ns)
	'load' operation ('a_load', matrix_mult.cpp:16) on array 'a' [64]  (2.32 ns)

 <State 4>: 4.15ns
The critical path consists of the following:
	'add' operation ('tmp_9', matrix_mult.cpp:16) [35]  (1.83 ns)
	'getelementptr' operation ('a_addr_3', matrix_mult.cpp:16) [37]  (0 ns)
	'load' operation ('a_load_3', matrix_mult.cpp:16) on array 'a' [79]  (2.32 ns)

 <State 5>: 4.15ns
The critical path consists of the following:
	'add' operation ('tmp_4', matrix_mult.cpp:16) [29]  (1.83 ns)
	'getelementptr' operation ('a_addr_1', matrix_mult.cpp:16) [31]  (0 ns)
	'load' operation ('a_load_1', matrix_mult.cpp:16) on array 'a' [69]  (2.32 ns)

 <State 6>: 4.17ns
The critical path consists of the following:
	'mul' operation ('tmp_7_4', matrix_mult.cpp:16) [88]  (4.17 ns)

 <State 7>: 4.17ns
The critical path consists of the following:
	'mul' operation ('tmp_7', matrix_mult.cpp:16) [68]  (4.17 ns)

 <State 8>: 3.02ns
The critical path consists of the following:
	'mul' operation ('tmp_7_1', matrix_mult.cpp:16) [73]  (0 ns)
	'add' operation ('tmp1', matrix_mult.cpp:16) [89]  (3.02 ns)

 <State 9>: 3.02ns
The critical path consists of the following:
	'mul' operation ('tmp_7_2', matrix_mult.cpp:16) [78]  (0 ns)
	'add' operation ('tmp2', matrix_mult.cpp:16) [91]  (3.02 ns)

 <State 10>: 2.08ns
The critical path consists of the following:
	'add' operation ('tmp_8_4', matrix_mult.cpp:16) [92]  (2.08 ns)

 <State 11>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('prod_addr', matrix_mult.cpp:13) [63]  (0 ns)
	'store' operation (matrix_mult.cpp:16) of variable 'tmp_8_4', matrix_mult.cpp:16 on array 'prod' [93]  (2.32 ns)

 <State 12>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
