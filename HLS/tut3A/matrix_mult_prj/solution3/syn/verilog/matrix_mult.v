// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.170000,HLS_SYN_LAT=83,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=256,HLS_SYN_LUT=566,HLS_VERSION=2018_2}" *)

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        prod_address0,
        prod_ce0,
        prod_we0,
        prod_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state12 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [4:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [4:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [4:0] b_address1;
output   b_ce1;
input  [7:0] b_q1;
output  [4:0] prod_address0;
output   prod_ce0;
output   prod_we0;
output  [15:0] prod_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] a_address0;
reg a_ce0;
reg[4:0] a_address1;
reg a_ce1;
reg[4:0] b_address0;
reg b_ce0;
reg[4:0] b_address1;
reg b_ce1;
reg prod_ce0;
reg prod_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_179;
reg   [2:0] i_reg_190;
reg   [2:0] j_reg_201;
reg  signed [7:0] reg_212;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state10_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] exitcond_flatten_reg_477;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg  signed [7:0] reg_217;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] exitcond_flatten_reg_477_pp0_iter1_reg;
reg  signed [7:0] reg_222;
wire   [0:0] exitcond_flatten_fu_227_p2;
reg   [0:0] exitcond_flatten_reg_477_pp0_iter2_reg;
wire   [4:0] indvar_flatten_next_fu_233_p2;
reg   [4:0] indvar_flatten_next_reg_481;
wire   [2:0] j_mid2_fu_251_p3;
reg   [2:0] j_mid2_reg_486;
wire   [2:0] tmp_mid2_v_fu_259_p3;
reg   [2:0] tmp_mid2_v_reg_495;
wire   [5:0] tmp_1_fu_281_p2;
reg   [5:0] tmp_1_reg_502;
wire   [4:0] tmp_2_cast3_fu_292_p1;
reg   [4:0] tmp_2_cast3_reg_516;
reg   [7:0] a_load_reg_551;
wire   [2:0] j_1_fu_355_p2;
reg   [2:0] j_1_reg_556;
wire   [5:0] tmp_14_fu_393_p2;
reg   [5:0] tmp_14_reg_576;
reg   [5:0] tmp_14_reg_576_pp0_iter2_reg;
reg  signed [7:0] b_load_1_reg_581;
wire   [15:0] tmp_7_4_fu_421_p2;
reg   [15:0] tmp_7_4_reg_606;
wire   [15:0] tmp_7_fu_434_p2;
reg   [15:0] tmp_7_reg_611;
wire  signed [15:0] grp_fu_456_p3;
reg  signed [15:0] tmp3_reg_626;
wire  signed [15:0] grp_fu_463_p3;
reg  signed [15:0] tmp1_reg_631;
reg    ap_enable_reg_pp0_iter2;
wire  signed [15:0] grp_fu_470_p3;
reg  signed [15:0] tmp2_reg_636;
(* use_dsp48 = "no" *) wire   [15:0] tmp_8_4_fu_448_p2;
reg   [15:0] tmp_8_4_reg_641;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter3;
reg   [4:0] ap_phi_mux_indvar_flatten_phi_fu_183_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_i_phi_fu_194_p4;
reg   [2:0] ap_phi_mux_j_phi_fu_205_p4;
wire   [63:0] tmp_1_cast_fu_287_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] tmp_13_cast_fu_301_p1;
wire   [63:0] tmp_14_cast_fu_312_p1;
wire  signed [63:0] tmp_9_cast_fu_322_p1;
wire    ap_block_pp0_stage2;
wire  signed [63:0] tmp_10_cast_fu_332_p1;
wire   [63:0] tmp_2_fu_337_p1;
wire   [63:0] tmp_11_cast_fu_350_p1;
wire   [63:0] tmp_4_cast_fu_365_p1;
wire  signed [63:0] tmp_8_cast_fu_375_p1;
wire   [63:0] tmp_12_cast_fu_388_p1;
wire   [63:0] tmp_15_cast_fu_452_p1;
wire   [0:0] exitcond_fu_245_p2;
wire   [2:0] i_1_fu_239_p2;
wire   [4:0] tmp_fu_270_p3;
wire   [5:0] tmp_mid2_cast_fu_267_p1;
wire   [5:0] p_shl_cast_fu_277_p1;
wire   [4:0] tmp_12_fu_295_p2;
wire   [4:0] tmp_13_fu_306_p2;
wire   [5:0] tmp_9_fu_317_p2;
wire   [5:0] tmp_s_fu_327_p2;
wire   [3:0] tmp_2_cast_fu_341_p1;
wire   [3:0] tmp_10_fu_344_p2;
wire   [5:0] tmp_4_fu_360_p2;
wire   [5:0] tmp_8_fu_370_p2;
wire   [4:0] tmp_11_fu_383_p2;
wire   [5:0] tmp_2_cast4_fu_380_p1;
wire  signed [7:0] tmp_7_4_fu_421_p0;
wire  signed [7:0] tmp_7_4_fu_421_p1;
wire  signed [7:0] tmp_7_fu_434_p0;
wire  signed [7:0] tmp_7_fu_434_p1;
wire    ap_CS_fsm_state12;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_72;
reg    ap_condition_92;
reg    ap_condition_154;
reg    ap_condition_170;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

matrix_mult_mac_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_212),
    .din1(a_q1),
    .din2(tmp_7_4_reg_606),
    .ce(1'b1),
    .dout(grp_fu_456_p3)
);

matrix_mult_mac_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_load_1_reg_581),
    .din1(a_q0),
    .din2(tmp_7_reg_611),
    .ce(1'b1),
    .dout(grp_fu_463_p3)
);

matrix_mult_mac_mcud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mcud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_217),
    .din1(reg_222),
    .din2(tmp3_reg_626),
    .ce(1'b1),
    .dout(grp_fu_470_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_477 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_190 <= tmp_mid2_v_reg_495;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_190 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_477 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_179 <= indvar_flatten_next_reg_481;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_179 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_477 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_201 <= j_1_reg_556;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_201 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((exitcond_flatten_reg_477 == 1'd0)) begin
        if ((1'b1 == ap_condition_92)) begin
            reg_212 <= b_q1;
        end else if ((1'b1 == ap_condition_72)) begin
            reg_212 <= b_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_477_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        reg_217 <= b_q0;
    end else if (((exitcond_flatten_reg_477 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_217 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_170)) begin
            reg_222 <= a_q1;
        end else if ((1'b1 == ap_condition_154)) begin
            reg_222 <= a_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_477 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_load_reg_551 <= a_q0;
        j_1_reg_556 <= j_1_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_477 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_load_1_reg_581 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_477 <= exitcond_flatten_fu_227_p2;
        exitcond_flatten_reg_477_pp0_iter1_reg <= exitcond_flatten_reg_477;
        exitcond_flatten_reg_477_pp0_iter2_reg <= exitcond_flatten_reg_477_pp0_iter1_reg;
        tmp_14_reg_576_pp0_iter2_reg <= tmp_14_reg_576;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_next_reg_481 <= indvar_flatten_next_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_mid2_reg_486 <= j_mid2_fu_251_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_477_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp1_reg_631 <= grp_fu_463_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_477_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp2_reg_636 <= grp_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_477_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp3_reg_626 <= grp_fu_456_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_477 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_14_reg_576 <= tmp_14_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_477 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_1_reg_502 <= tmp_1_fu_281_p2;
        tmp_2_cast3_reg_516[2 : 0] <= tmp_2_cast3_fu_292_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_477_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_7_4_reg_606 <= tmp_7_4_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_477_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_7_reg_611 <= tmp_7_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_477_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_8_4_reg_641 <= tmp_8_4_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_mid2_v_reg_495 <= tmp_mid2_v_fu_259_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_address0 = tmp_4_cast_fu_365_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_address0 = tmp_10_cast_fu_332_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        a_address0 = tmp_1_cast_fu_287_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_address1 = tmp_8_cast_fu_375_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        a_address1 = tmp_9_cast_fu_322_p1;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_227_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_477 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_194_p4 = tmp_mid2_v_reg_495;
    end else begin
        ap_phi_mux_i_phi_fu_194_p4 = i_reg_190;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_477 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_183_p4 = indvar_flatten_next_reg_481;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_183_p4 = indvar_flatten_reg_179;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_477 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_205_p4 = j_1_reg_556;
    end else begin
        ap_phi_mux_j_phi_fu_205_p4 = j_reg_201;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_address0 = tmp_12_cast_fu_388_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        b_address0 = tmp_11_cast_fu_350_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        b_address0 = tmp_13_cast_fu_301_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            b_address1 = tmp_2_fu_337_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            b_address1 = tmp_14_cast_fu_312_p1;
        end else begin
            b_address1 = 'bx;
        end
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_477_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_227_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_227_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_154 = ((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_477 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_170 = ((exitcond_flatten_reg_477_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_72 = ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_92 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_227_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_183_p4 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond_fu_245_p2 = ((ap_phi_mux_j_phi_fu_205_p4 == 3'd5) ? 1'b1 : 1'b0);

assign i_1_fu_239_p2 = (ap_phi_mux_i_phi_fu_194_p4 + 3'd1);

assign indvar_flatten_next_fu_233_p2 = (ap_phi_mux_indvar_flatten_phi_fu_183_p4 + 5'd1);

assign j_1_fu_355_p2 = (j_mid2_reg_486 + 3'd1);

assign j_mid2_fu_251_p3 = ((exitcond_fu_245_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_j_phi_fu_205_p4);

assign p_shl_cast_fu_277_p1 = tmp_fu_270_p3;

assign prod_address0 = tmp_15_cast_fu_452_p1;

assign prod_d0 = tmp_8_4_reg_641;

assign tmp_10_cast_fu_332_p1 = $signed(tmp_s_fu_327_p2);

assign tmp_10_fu_344_p2 = (tmp_2_cast_fu_341_p1 + 4'd5);

assign tmp_11_cast_fu_350_p1 = tmp_10_fu_344_p2;

assign tmp_11_fu_383_p2 = (tmp_2_cast3_reg_516 + 5'd10);

assign tmp_12_cast_fu_388_p1 = tmp_11_fu_383_p2;

assign tmp_12_fu_295_p2 = (tmp_2_cast3_fu_292_p1 + 5'd15);

assign tmp_13_cast_fu_301_p1 = tmp_12_fu_295_p2;

assign tmp_13_fu_306_p2 = ($signed(tmp_2_cast3_fu_292_p1) + $signed(5'd20));

assign tmp_14_cast_fu_312_p1 = tmp_13_fu_306_p2;

assign tmp_14_fu_393_p2 = (tmp_1_reg_502 + tmp_2_cast4_fu_380_p1);

assign tmp_15_cast_fu_452_p1 = tmp_14_reg_576_pp0_iter2_reg;

assign tmp_1_cast_fu_287_p1 = tmp_1_fu_281_p2;

assign tmp_1_fu_281_p2 = (tmp_mid2_cast_fu_267_p1 + p_shl_cast_fu_277_p1);

assign tmp_2_cast3_fu_292_p1 = j_mid2_reg_486;

assign tmp_2_cast4_fu_380_p1 = j_mid2_reg_486;

assign tmp_2_cast_fu_341_p1 = j_mid2_reg_486;

assign tmp_2_fu_337_p1 = j_mid2_reg_486;

assign tmp_4_cast_fu_365_p1 = tmp_4_fu_360_p2;

assign tmp_4_fu_360_p2 = (tmp_1_reg_502 + 6'd1);

assign tmp_7_4_fu_421_p0 = reg_217;

assign tmp_7_4_fu_421_p1 = reg_222;

assign tmp_7_4_fu_421_p2 = ($signed(tmp_7_4_fu_421_p0) * $signed(tmp_7_4_fu_421_p1));

assign tmp_7_fu_434_p0 = reg_212;

assign tmp_7_fu_434_p1 = a_load_reg_551;

assign tmp_7_fu_434_p2 = ($signed(tmp_7_fu_434_p0) * $signed(tmp_7_fu_434_p1));

assign tmp_8_4_fu_448_p2 = ($signed(tmp1_reg_631) + $signed(tmp2_reg_636));

assign tmp_8_cast_fu_375_p1 = $signed(tmp_8_fu_370_p2);

assign tmp_8_fu_370_p2 = (tmp_1_reg_502 + 6'd2);

assign tmp_9_cast_fu_322_p1 = $signed(tmp_9_fu_317_p2);

assign tmp_9_fu_317_p2 = (tmp_1_reg_502 + 6'd3);

assign tmp_fu_270_p3 = {{tmp_mid2_v_reg_495}, {2'd0}};

assign tmp_mid2_cast_fu_267_p1 = tmp_mid2_v_reg_495;

assign tmp_mid2_v_fu_259_p3 = ((exitcond_fu_245_p2[0:0] === 1'b1) ? i_1_fu_239_p2 : ap_phi_mux_i_phi_fu_194_p4);

assign tmp_s_fu_327_p2 = (tmp_1_reg_502 + 6'd4);

always @ (posedge ap_clk) begin
    tmp_2_cast3_reg_516[4:3] <= 2'b00;
end

endmodule //matrix_mult
