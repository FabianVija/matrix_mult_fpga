// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrix_mult_HH_
#define _matrix_mult_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matrix_mult_mac_mbkb.h"
#include "matrix_mult_mac_mcud.h"

namespace ap_rtl {

struct matrix_mult : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<8> > a_q0;
    sc_out< sc_lv<5> > a_address1;
    sc_out< sc_logic > a_ce1;
    sc_in< sc_lv<8> > a_q1;
    sc_out< sc_lv<5> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<8> > b_q0;
    sc_out< sc_lv<5> > b_address1;
    sc_out< sc_logic > b_ce1;
    sc_in< sc_lv<8> > b_q1;
    sc_out< sc_lv<5> > prod_address0;
    sc_out< sc_logic > prod_ce0;
    sc_out< sc_logic > prod_we0;
    sc_out< sc_lv<16> > prod_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    matrix_mult(sc_module_name name);
    SC_HAS_PROCESS(matrix_mult);

    ~matrix_mult();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matrix_mult_mac_mbkb<1,3,8,8,16,16>* matrix_mult_mac_mbkb_U1;
    matrix_mult_mac_mbkb<1,3,8,8,16,16>* matrix_mult_mac_mbkb_U2;
    matrix_mult_mac_mcud<1,3,8,8,16,16>* matrix_mult_mac_mcud_U3;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > indvar_flatten_reg_179;
    sc_signal< sc_lv<3> > i_reg_190;
    sc_signal< sc_lv<3> > j_reg_201;
    sc_signal< sc_lv<8> > reg_212;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage2_iter1;
    sc_signal< bool > ap_block_state10_pp0_stage2_iter2;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_477;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<8> > reg_217;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage1_iter1;
    sc_signal< bool > ap_block_state9_pp0_stage1_iter2;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_477_pp0_iter1_reg;
    sc_signal< sc_lv<8> > reg_222;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_227_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_477_pp0_iter2_reg;
    sc_signal< sc_lv<5> > indvar_flatten_next_fu_233_p2;
    sc_signal< sc_lv<5> > indvar_flatten_next_reg_481;
    sc_signal< sc_lv<3> > j_mid2_fu_251_p3;
    sc_signal< sc_lv<3> > j_mid2_reg_486;
    sc_signal< sc_lv<3> > tmp_mid2_v_fu_259_p3;
    sc_signal< sc_lv<3> > tmp_mid2_v_reg_495;
    sc_signal< sc_lv<6> > tmp_1_fu_281_p2;
    sc_signal< sc_lv<6> > tmp_1_reg_502;
    sc_signal< sc_lv<5> > tmp_2_cast3_fu_292_p1;
    sc_signal< sc_lv<5> > tmp_2_cast3_reg_516;
    sc_signal< sc_lv<8> > a_load_reg_551;
    sc_signal< sc_lv<3> > j_1_fu_355_p2;
    sc_signal< sc_lv<3> > j_1_reg_556;
    sc_signal< sc_lv<6> > tmp_14_fu_393_p2;
    sc_signal< sc_lv<6> > tmp_14_reg_576;
    sc_signal< sc_lv<6> > tmp_14_reg_576_pp0_iter2_reg;
    sc_signal< sc_lv<8> > b_load_1_reg_581;
    sc_signal< sc_lv<16> > tmp_7_4_fu_421_p2;
    sc_signal< sc_lv<16> > tmp_7_4_reg_606;
    sc_signal< sc_lv<16> > tmp_7_fu_434_p2;
    sc_signal< sc_lv<16> > tmp_7_reg_611;
    sc_signal< sc_lv<16> > grp_fu_456_p3;
    sc_signal< sc_lv<16> > tmp3_reg_626;
    sc_signal< sc_lv<16> > grp_fu_463_p3;
    sc_signal< sc_lv<16> > tmp1_reg_631;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<16> > grp_fu_470_p3;
    sc_signal< sc_lv<16> > tmp2_reg_636;
    sc_signal< sc_lv<16> > tmp_8_4_fu_448_p2;
    sc_signal< sc_lv<16> > tmp_8_4_reg_641;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<5> > ap_phi_mux_indvar_flatten_phi_fu_183_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<3> > ap_phi_mux_i_phi_fu_194_p4;
    sc_signal< sc_lv<3> > ap_phi_mux_j_phi_fu_205_p4;
    sc_signal< sc_lv<64> > tmp_1_cast_fu_287_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<64> > tmp_13_cast_fu_301_p1;
    sc_signal< sc_lv<64> > tmp_14_cast_fu_312_p1;
    sc_signal< sc_lv<64> > tmp_9_cast_fu_322_p1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_lv<64> > tmp_10_cast_fu_332_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_337_p1;
    sc_signal< sc_lv<64> > tmp_11_cast_fu_350_p1;
    sc_signal< sc_lv<64> > tmp_4_cast_fu_365_p1;
    sc_signal< sc_lv<64> > tmp_8_cast_fu_375_p1;
    sc_signal< sc_lv<64> > tmp_12_cast_fu_388_p1;
    sc_signal< sc_lv<64> > tmp_15_cast_fu_452_p1;
    sc_signal< sc_lv<1> > exitcond_fu_245_p2;
    sc_signal< sc_lv<3> > i_1_fu_239_p2;
    sc_signal< sc_lv<5> > tmp_fu_270_p3;
    sc_signal< sc_lv<6> > tmp_mid2_cast_fu_267_p1;
    sc_signal< sc_lv<6> > p_shl_cast_fu_277_p1;
    sc_signal< sc_lv<5> > tmp_12_fu_295_p2;
    sc_signal< sc_lv<5> > tmp_13_fu_306_p2;
    sc_signal< sc_lv<6> > tmp_9_fu_317_p2;
    sc_signal< sc_lv<6> > tmp_s_fu_327_p2;
    sc_signal< sc_lv<4> > tmp_2_cast_fu_341_p1;
    sc_signal< sc_lv<4> > tmp_10_fu_344_p2;
    sc_signal< sc_lv<6> > tmp_4_fu_360_p2;
    sc_signal< sc_lv<6> > tmp_8_fu_370_p2;
    sc_signal< sc_lv<5> > tmp_11_fu_383_p2;
    sc_signal< sc_lv<6> > tmp_2_cast4_fu_380_p1;
    sc_signal< sc_lv<8> > tmp_7_4_fu_421_p0;
    sc_signal< sc_lv<8> > tmp_7_4_fu_421_p1;
    sc_signal< sc_lv<8> > tmp_7_fu_434_p0;
    sc_signal< sc_lv<8> > tmp_7_fu_434_p1;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_72;
    sc_signal< bool > ap_condition_92;
    sc_signal< bool > ap_condition_154;
    sc_signal< bool > ap_condition_170;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_pp0_stage1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage2;
    static const sc_lv<5> ap_ST_fsm_state12;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<5> ap_const_lv5_19;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_F;
    static const sc_lv<5> ap_const_lv5_14;
    static const sc_lv<6> ap_const_lv6_3;
    static const sc_lv<6> ap_const_lv6_4;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<6> ap_const_lv6_2;
    static const sc_lv<5> ap_const_lv5_A;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_address1();
    void thread_a_ce0();
    void thread_a_ce1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_state10_pp0_stage2_iter2();
    void thread_ap_block_state11_pp0_stage0_iter3();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage2_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_block_state6_pp0_stage1_iter1();
    void thread_ap_block_state7_pp0_stage2_iter1();
    void thread_ap_block_state8_pp0_stage0_iter2();
    void thread_ap_block_state9_pp0_stage1_iter2();
    void thread_ap_condition_154();
    void thread_ap_condition_170();
    void thread_ap_condition_72();
    void thread_ap_condition_92();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_194_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_183_p4();
    void thread_ap_phi_mux_j_phi_fu_205_p4();
    void thread_ap_ready();
    void thread_b_address0();
    void thread_b_address1();
    void thread_b_ce0();
    void thread_b_ce1();
    void thread_exitcond_flatten_fu_227_p2();
    void thread_exitcond_fu_245_p2();
    void thread_i_1_fu_239_p2();
    void thread_indvar_flatten_next_fu_233_p2();
    void thread_j_1_fu_355_p2();
    void thread_j_mid2_fu_251_p3();
    void thread_p_shl_cast_fu_277_p1();
    void thread_prod_address0();
    void thread_prod_ce0();
    void thread_prod_d0();
    void thread_prod_we0();
    void thread_tmp_10_cast_fu_332_p1();
    void thread_tmp_10_fu_344_p2();
    void thread_tmp_11_cast_fu_350_p1();
    void thread_tmp_11_fu_383_p2();
    void thread_tmp_12_cast_fu_388_p1();
    void thread_tmp_12_fu_295_p2();
    void thread_tmp_13_cast_fu_301_p1();
    void thread_tmp_13_fu_306_p2();
    void thread_tmp_14_cast_fu_312_p1();
    void thread_tmp_14_fu_393_p2();
    void thread_tmp_15_cast_fu_452_p1();
    void thread_tmp_1_cast_fu_287_p1();
    void thread_tmp_1_fu_281_p2();
    void thread_tmp_2_cast3_fu_292_p1();
    void thread_tmp_2_cast4_fu_380_p1();
    void thread_tmp_2_cast_fu_341_p1();
    void thread_tmp_2_fu_337_p1();
    void thread_tmp_4_cast_fu_365_p1();
    void thread_tmp_4_fu_360_p2();
    void thread_tmp_7_4_fu_421_p0();
    void thread_tmp_7_4_fu_421_p1();
    void thread_tmp_7_4_fu_421_p2();
    void thread_tmp_7_fu_434_p0();
    void thread_tmp_7_fu_434_p1();
    void thread_tmp_7_fu_434_p2();
    void thread_tmp_8_4_fu_448_p2();
    void thread_tmp_8_cast_fu_375_p1();
    void thread_tmp_8_fu_370_p2();
    void thread_tmp_9_cast_fu_322_p1();
    void thread_tmp_9_fu_317_p2();
    void thread_tmp_fu_270_p3();
    void thread_tmp_mid2_cast_fu_267_p1();
    void thread_tmp_mid2_v_fu_259_p3();
    void thread_tmp_s_fu_327_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
