// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrix_mult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrix_mult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrix_mult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> matrix_mult::ap_ST_fsm_state1 = "1";
const sc_lv<3> matrix_mult::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> matrix_mult::ap_ST_fsm_state10 = "100";
const sc_lv<32> matrix_mult::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool matrix_mult::ap_const_boolean_1 = true;
const sc_lv<32> matrix_mult::ap_const_lv32_1 = "1";
const bool matrix_mult::ap_const_boolean_0 = false;
const sc_lv<1> matrix_mult::ap_const_lv1_0 = "0";
const sc_lv<1> matrix_mult::ap_const_lv1_1 = "1";
const sc_lv<5> matrix_mult::ap_const_lv5_0 = "00000";
const sc_lv<3> matrix_mult::ap_const_lv3_0 = "000";
const sc_lv<5> matrix_mult::ap_const_lv5_19 = "11001";
const sc_lv<5> matrix_mult::ap_const_lv5_1 = "1";
const sc_lv<3> matrix_mult::ap_const_lv3_1 = "1";
const sc_lv<3> matrix_mult::ap_const_lv3_5 = "101";
const sc_lv<32> matrix_mult::ap_const_lv32_8 = "1000";
const sc_lv<32> matrix_mult::ap_const_lv32_F = "1111";
const sc_lv<32> matrix_mult::ap_const_lv32_10 = "10000";
const sc_lv<32> matrix_mult::ap_const_lv32_17 = "10111";
const sc_lv<32> matrix_mult::ap_const_lv32_18 = "11000";
const sc_lv<32> matrix_mult::ap_const_lv32_1F = "11111";
const sc_lv<32> matrix_mult::ap_const_lv32_20 = "100000";
const sc_lv<32> matrix_mult::ap_const_lv32_27 = "100111";
const sc_lv<2> matrix_mult::ap_const_lv2_0 = "00";
const sc_lv<32> matrix_mult::ap_const_lv32_2 = "10";

matrix_mult::matrix_mult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matrix_mult_mac_mbkb_U1 = new matrix_mult_mac_mbkb<1,3,8,8,16,16>("matrix_mult_mac_mbkb_U1");
    matrix_mult_mac_mbkb_U1->clk(ap_clk);
    matrix_mult_mac_mbkb_U1->reset(ap_rst);
    matrix_mult_mac_mbkb_U1->din0(tmp_6_fu_196_p1);
    matrix_mult_mac_mbkb_U1->din1(tmp_16_fu_204_p1);
    matrix_mult_mac_mbkb_U1->din2(tmp_7_1_reg_476);
    matrix_mult_mac_mbkb_U1->ce(ap_var_for_const0);
    matrix_mult_mac_mbkb_U1->dout(grp_fu_367_p3);
    matrix_mult_mac_mbkb_U2 = new matrix_mult_mac_mbkb<1,3,8,8,16,16>("matrix_mult_mac_mbkb_U2");
    matrix_mult_mac_mbkb_U2->clk(ap_clk);
    matrix_mult_mac_mbkb_U2->reset(ap_rst);
    matrix_mult_mac_mbkb_U2->din0(tmp_14_fu_272_p4);
    matrix_mult_mac_mbkb_U2->din1(tmp_15_fu_286_p4);
    matrix_mult_mac_mbkb_U2->din2(tmp_7_3_reg_491);
    matrix_mult_mac_mbkb_U2->ce(ap_var_for_const0);
    matrix_mult_mac_mbkb_U2->dout(grp_fu_374_p3);
    matrix_mult_mac_mcud_U3 = new matrix_mult_mac_mcud<1,3,8,8,16,16>("matrix_mult_mac_mcud_U3");
    matrix_mult_mac_mcud_U3->clk(ap_clk);
    matrix_mult_mac_mcud_U3->reset(ap_rst);
    matrix_mult_mac_mcud_U3->din0(tmp_10_reg_446);
    matrix_mult_mac_mcud_U3->din1(tmp_11_reg_451);
    matrix_mult_mac_mcud_U3->din2(tmp3_reg_501);
    matrix_mult_mac_mcud_U3->ce(ap_var_for_const0);
    matrix_mult_mac_mcud_U3->dout(grp_fu_381_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_mid2_fu_188_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter7);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_142_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_ap_phi_mux_i_phi_fu_124_p4);
    sensitive << ( i_reg_120 );
    sensitive << ( exitcond_flatten_reg_388 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_mid2_v_reg_403 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_b_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_2_fu_192_p1 );

    SC_METHOD(thread_b_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_exitcond_flatten_fu_142_p2);
    sensitive << ( indvar_flatten_reg_109 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_fu_160_p2);
    sensitive << ( j_reg_131 );
    sensitive << ( exitcond_flatten_fu_142_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_1_fu_154_p2);
    sensitive << ( ap_phi_mux_i_phi_fu_124_p4 );

    SC_METHOD(thread_indvar_flatten_next_fu_148_p2);
    sensitive << ( indvar_flatten_reg_109 );

    SC_METHOD(thread_j_1_fu_182_p2);
    sensitive << ( j_mid2_fu_166_p3 );

    SC_METHOD(thread_j_mid2_fu_166_p3);
    sensitive << ( j_reg_131 );
    sensitive << ( exitcond_fu_160_p2 );

    SC_METHOD(thread_p_shl_cast_fu_340_p1);
    sensitive << ( tmp_fu_333_p3 );

    SC_METHOD(thread_prod_address0);
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_16_cast_fu_363_p1 );

    SC_METHOD(thread_prod_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_prod_d0);
    sensitive << ( tmp_8_4_reg_516 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_prod_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( exitcond_flatten_reg_388_pp0_iter6_reg );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_tmp_14_fu_272_p4);
    sensitive << ( a_q0 );

    SC_METHOD(thread_tmp_15_fu_286_p4);
    sensitive << ( b_q0 );

    SC_METHOD(thread_tmp_16_cast_fu_363_p1);
    sensitive << ( tmp_4_reg_511 );

    SC_METHOD(thread_tmp_16_fu_204_p1);
    sensitive << ( b_q0 );

    SC_METHOD(thread_tmp_1_fu_344_p2);
    sensitive << ( p_shl_cast_fu_340_p1 );
    sensitive << ( tmp_mid2_cast_fu_330_p1 );

    SC_METHOD(thread_tmp_2_cast_fu_350_p1);
    sensitive << ( j_mid2_reg_397_pp0_iter5_reg );

    SC_METHOD(thread_tmp_2_fu_192_p1);
    sensitive << ( j_mid2_reg_397 );

    SC_METHOD(thread_tmp_4_fu_353_p2);
    sensitive << ( tmp_2_cast_fu_350_p1 );
    sensitive << ( tmp_1_fu_344_p2 );

    SC_METHOD(thread_tmp_6_fu_196_p1);
    sensitive << ( a_q0 );

    SC_METHOD(thread_tmp_7_1_fu_306_p0);
    sensitive << ( tmp_8_reg_436 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tmp_7_1_fu_306_p1);
    sensitive << ( tmp_9_reg_441 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tmp_7_1_fu_306_p2);
    sensitive << ( tmp_7_1_fu_306_p0 );
    sensitive << ( tmp_7_1_fu_306_p1 );

    SC_METHOD(thread_tmp_7_3_fu_324_p0);
    sensitive << ( tmp_12_reg_456 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tmp_7_3_fu_324_p1);
    sensitive << ( tmp_13_reg_461 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_tmp_7_3_fu_324_p2);
    sensitive << ( tmp_7_3_fu_324_p0 );
    sensitive << ( tmp_7_3_fu_324_p1 );

    SC_METHOD(thread_tmp_8_4_fu_359_p2);
    sensitive << ( tmp1_reg_496_pp0_iter5_reg );
    sensitive << ( tmp2_reg_506 );

    SC_METHOD(thread_tmp_fu_333_p3);
    sensitive << ( tmp_mid2_v_reg_403_pp0_iter5_reg );

    SC_METHOD(thread_tmp_mid2_cast_fu_330_p1);
    sensitive << ( tmp_mid2_v_reg_403_pp0_iter5_reg );

    SC_METHOD(thread_tmp_mid2_fu_188_p1);
    sensitive << ( tmp_mid2_v_reg_403 );

    SC_METHOD(thread_tmp_mid2_v_fu_174_p3);
    sensitive << ( ap_phi_mux_i_phi_fu_124_p4 );
    sensitive << ( exitcond_fu_160_p2 );
    sensitive << ( i_1_fu_154_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond_flatten_fu_142_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrix_mult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, b_address0, "(port)b_address0");
    sc_trace(mVcdFile, b_ce0, "(port)b_ce0");
    sc_trace(mVcdFile, b_q0, "(port)b_q0");
    sc_trace(mVcdFile, prod_address0, "(port)prod_address0");
    sc_trace(mVcdFile, prod_ce0, "(port)prod_ce0");
    sc_trace(mVcdFile, prod_we0, "(port)prod_we0");
    sc_trace(mVcdFile, prod_d0, "(port)prod_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvar_flatten_reg_109, "indvar_flatten_reg_109");
    sc_trace(mVcdFile, i_reg_120, "i_reg_120");
    sc_trace(mVcdFile, j_reg_131, "j_reg_131");
    sc_trace(mVcdFile, exitcond_flatten_fu_142_p2, "exitcond_flatten_fu_142_p2");
    sc_trace(mVcdFile, exitcond_flatten_reg_388, "exitcond_flatten_reg_388");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter7, "ap_block_state9_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond_flatten_reg_388_pp0_iter1_reg, "exitcond_flatten_reg_388_pp0_iter1_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_388_pp0_iter2_reg, "exitcond_flatten_reg_388_pp0_iter2_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_388_pp0_iter3_reg, "exitcond_flatten_reg_388_pp0_iter3_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_388_pp0_iter4_reg, "exitcond_flatten_reg_388_pp0_iter4_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_388_pp0_iter5_reg, "exitcond_flatten_reg_388_pp0_iter5_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_388_pp0_iter6_reg, "exitcond_flatten_reg_388_pp0_iter6_reg");
    sc_trace(mVcdFile, indvar_flatten_next_fu_148_p2, "indvar_flatten_next_fu_148_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, j_mid2_fu_166_p3, "j_mid2_fu_166_p3");
    sc_trace(mVcdFile, j_mid2_reg_397, "j_mid2_reg_397");
    sc_trace(mVcdFile, j_mid2_reg_397_pp0_iter1_reg, "j_mid2_reg_397_pp0_iter1_reg");
    sc_trace(mVcdFile, j_mid2_reg_397_pp0_iter2_reg, "j_mid2_reg_397_pp0_iter2_reg");
    sc_trace(mVcdFile, j_mid2_reg_397_pp0_iter3_reg, "j_mid2_reg_397_pp0_iter3_reg");
    sc_trace(mVcdFile, j_mid2_reg_397_pp0_iter4_reg, "j_mid2_reg_397_pp0_iter4_reg");
    sc_trace(mVcdFile, j_mid2_reg_397_pp0_iter5_reg, "j_mid2_reg_397_pp0_iter5_reg");
    sc_trace(mVcdFile, tmp_mid2_v_fu_174_p3, "tmp_mid2_v_fu_174_p3");
    sc_trace(mVcdFile, tmp_mid2_v_reg_403, "tmp_mid2_v_reg_403");
    sc_trace(mVcdFile, tmp_mid2_v_reg_403_pp0_iter1_reg, "tmp_mid2_v_reg_403_pp0_iter1_reg");
    sc_trace(mVcdFile, tmp_mid2_v_reg_403_pp0_iter2_reg, "tmp_mid2_v_reg_403_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_mid2_v_reg_403_pp0_iter3_reg, "tmp_mid2_v_reg_403_pp0_iter3_reg");
    sc_trace(mVcdFile, tmp_mid2_v_reg_403_pp0_iter4_reg, "tmp_mid2_v_reg_403_pp0_iter4_reg");
    sc_trace(mVcdFile, tmp_mid2_v_reg_403_pp0_iter5_reg, "tmp_mid2_v_reg_403_pp0_iter5_reg");
    sc_trace(mVcdFile, j_1_fu_182_p2, "j_1_fu_182_p2");
    sc_trace(mVcdFile, tmp_8_reg_436, "tmp_8_reg_436");
    sc_trace(mVcdFile, tmp_9_reg_441, "tmp_9_reg_441");
    sc_trace(mVcdFile, tmp_10_reg_446, "tmp_10_reg_446");
    sc_trace(mVcdFile, tmp_11_reg_451, "tmp_11_reg_451");
    sc_trace(mVcdFile, tmp_12_reg_456, "tmp_12_reg_456");
    sc_trace(mVcdFile, tmp_13_reg_461, "tmp_13_reg_461");
    sc_trace(mVcdFile, tmp_7_1_fu_306_p2, "tmp_7_1_fu_306_p2");
    sc_trace(mVcdFile, tmp_7_1_reg_476, "tmp_7_1_reg_476");
    sc_trace(mVcdFile, tmp_7_3_fu_324_p2, "tmp_7_3_fu_324_p2");
    sc_trace(mVcdFile, tmp_7_3_reg_491, "tmp_7_3_reg_491");
    sc_trace(mVcdFile, grp_fu_367_p3, "grp_fu_367_p3");
    sc_trace(mVcdFile, tmp1_reg_496, "tmp1_reg_496");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, tmp1_reg_496_pp0_iter5_reg, "tmp1_reg_496_pp0_iter5_reg");
    sc_trace(mVcdFile, grp_fu_374_p3, "grp_fu_374_p3");
    sc_trace(mVcdFile, tmp3_reg_501, "tmp3_reg_501");
    sc_trace(mVcdFile, grp_fu_381_p3, "grp_fu_381_p3");
    sc_trace(mVcdFile, tmp2_reg_506, "tmp2_reg_506");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, tmp_4_fu_353_p2, "tmp_4_fu_353_p2");
    sc_trace(mVcdFile, tmp_4_reg_511, "tmp_4_reg_511");
    sc_trace(mVcdFile, tmp_8_4_fu_359_p2, "tmp_8_4_fu_359_p2");
    sc_trace(mVcdFile, tmp_8_4_reg_516, "tmp_8_4_reg_516");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, ap_phi_mux_i_phi_fu_124_p4, "ap_phi_mux_i_phi_fu_124_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_mid2_fu_188_p1, "tmp_mid2_fu_188_p1");
    sc_trace(mVcdFile, tmp_2_fu_192_p1, "tmp_2_fu_192_p1");
    sc_trace(mVcdFile, tmp_16_cast_fu_363_p1, "tmp_16_cast_fu_363_p1");
    sc_trace(mVcdFile, exitcond_fu_160_p2, "exitcond_fu_160_p2");
    sc_trace(mVcdFile, i_1_fu_154_p2, "i_1_fu_154_p2");
    sc_trace(mVcdFile, tmp_6_fu_196_p1, "tmp_6_fu_196_p1");
    sc_trace(mVcdFile, tmp_16_fu_204_p1, "tmp_16_fu_204_p1");
    sc_trace(mVcdFile, tmp_14_fu_272_p4, "tmp_14_fu_272_p4");
    sc_trace(mVcdFile, tmp_15_fu_286_p4, "tmp_15_fu_286_p4");
    sc_trace(mVcdFile, tmp_7_1_fu_306_p0, "tmp_7_1_fu_306_p0");
    sc_trace(mVcdFile, tmp_7_1_fu_306_p1, "tmp_7_1_fu_306_p1");
    sc_trace(mVcdFile, tmp_7_3_fu_324_p0, "tmp_7_3_fu_324_p0");
    sc_trace(mVcdFile, tmp_7_3_fu_324_p1, "tmp_7_3_fu_324_p1");
    sc_trace(mVcdFile, tmp_fu_333_p3, "tmp_fu_333_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_340_p1, "p_shl_cast_fu_340_p1");
    sc_trace(mVcdFile, tmp_mid2_cast_fu_330_p1, "tmp_mid2_cast_fu_330_p1");
    sc_trace(mVcdFile, tmp_2_cast_fu_350_p1, "tmp_2_cast_fu_350_p1");
    sc_trace(mVcdFile, tmp_1_fu_344_p2, "tmp_1_fu_344_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("matrix_mult.hdltvin.dat");
    mHdltvoutHandle.open("matrix_mult.hdltvout.dat");
}

matrix_mult::~matrix_mult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete matrix_mult_mac_mbkb_U1;
    delete matrix_mult_mac_mbkb_U2;
    delete matrix_mult_mac_mcud_U3;
}

void matrix_mult::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void matrix_mult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter7 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_388.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i_reg_120 = tmp_mid2_v_reg_403.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        i_reg_120 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_142_p2.read(), ap_const_lv1_0))) {
        indvar_flatten_reg_109 = indvar_flatten_next_fu_148_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        indvar_flatten_reg_109 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(exitcond_flatten_fu_142_p2.read(), ap_const_lv1_0))) {
        j_reg_131 = j_1_fu_182_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        j_reg_131 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_388 = exitcond_flatten_fu_142_p2.read();
        exitcond_flatten_reg_388_pp0_iter1_reg = exitcond_flatten_reg_388.read();
        j_mid2_reg_397_pp0_iter1_reg = j_mid2_reg_397.read();
        tmp_mid2_v_reg_403_pp0_iter1_reg = tmp_mid2_v_reg_403.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        exitcond_flatten_reg_388_pp0_iter2_reg = exitcond_flatten_reg_388_pp0_iter1_reg.read();
        exitcond_flatten_reg_388_pp0_iter3_reg = exitcond_flatten_reg_388_pp0_iter2_reg.read();
        exitcond_flatten_reg_388_pp0_iter4_reg = exitcond_flatten_reg_388_pp0_iter3_reg.read();
        exitcond_flatten_reg_388_pp0_iter5_reg = exitcond_flatten_reg_388_pp0_iter4_reg.read();
        exitcond_flatten_reg_388_pp0_iter6_reg = exitcond_flatten_reg_388_pp0_iter5_reg.read();
        j_mid2_reg_397_pp0_iter2_reg = j_mid2_reg_397_pp0_iter1_reg.read();
        j_mid2_reg_397_pp0_iter3_reg = j_mid2_reg_397_pp0_iter2_reg.read();
        j_mid2_reg_397_pp0_iter4_reg = j_mid2_reg_397_pp0_iter3_reg.read();
        j_mid2_reg_397_pp0_iter5_reg = j_mid2_reg_397_pp0_iter4_reg.read();
        tmp1_reg_496_pp0_iter5_reg = tmp1_reg_496.read();
        tmp_mid2_v_reg_403_pp0_iter2_reg = tmp_mid2_v_reg_403_pp0_iter1_reg.read();
        tmp_mid2_v_reg_403_pp0_iter3_reg = tmp_mid2_v_reg_403_pp0_iter2_reg.read();
        tmp_mid2_v_reg_403_pp0_iter4_reg = tmp_mid2_v_reg_403_pp0_iter3_reg.read();
        tmp_mid2_v_reg_403_pp0_iter5_reg = tmp_mid2_v_reg_403_pp0_iter4_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_fu_142_p2.read(), ap_const_lv1_0))) {
        j_mid2_reg_397 = j_mid2_fu_166_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_388_pp0_iter3_reg.read(), ap_const_lv1_0))) {
        tmp1_reg_496 = grp_fu_367_p3.read();
        tmp3_reg_501 = grp_fu_374_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_388_pp0_iter4_reg.read(), ap_const_lv1_0))) {
        tmp2_reg_506 = grp_fu_381_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_reg_388_pp0_iter1_reg.read(), ap_const_lv1_0))) {
        tmp_10_reg_446 = a_q0.read().range(23, 16);
        tmp_11_reg_451 = b_q0.read().range(23, 16);
        tmp_12_reg_456 = a_q0.read().range(31, 24);
        tmp_13_reg_461 = b_q0.read().range(31, 24);
        tmp_8_reg_436 = a_q0.read().range(15, 8);
        tmp_9_reg_441 = b_q0.read().range(15, 8);
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_reg_388_pp0_iter5_reg.read(), ap_const_lv1_0))) {
        tmp_4_reg_511 = tmp_4_fu_353_p2.read();
        tmp_8_4_reg_516 = tmp_8_4_fu_359_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_flatten_reg_388_pp0_iter2_reg.read(), ap_const_lv1_0))) {
        tmp_7_1_reg_476 = tmp_7_1_fu_306_p2.read();
        tmp_7_3_reg_491 = tmp_7_3_fu_324_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_flatten_fu_142_p2.read(), ap_const_lv1_0))) {
        tmp_mid2_v_reg_403 = tmp_mid2_v_fu_174_p3.read();
    }
}

void matrix_mult::thread_a_address0() {
    a_address0 =  (sc_lv<3>) (tmp_mid2_fu_188_p1.read());
}

void matrix_mult::thread_a_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void matrix_mult::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void matrix_mult::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrix_mult::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[2];
}

void matrix_mult::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_block_state9_pp0_stage0_iter7() {
    ap_block_state9_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void matrix_mult::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_142_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void matrix_mult::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrix_mult::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void matrix_mult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrix_mult::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void matrix_mult::thread_ap_phi_mux_i_phi_fu_124_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_388.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_phi_fu_124_p4 = tmp_mid2_v_reg_403.read();
    } else {
        ap_phi_mux_i_phi_fu_124_p4 = i_reg_120.read();
    }
}

void matrix_mult::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrix_mult::thread_b_address0() {
    b_address0 =  (sc_lv<3>) (tmp_2_fu_192_p1.read());
}

void matrix_mult::thread_b_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        b_ce0 = ap_const_logic_1;
    } else {
        b_ce0 = ap_const_logic_0;
    }
}

void matrix_mult::thread_exitcond_flatten_fu_142_p2() {
    exitcond_flatten_fu_142_p2 = (!indvar_flatten_reg_109.read().is_01() || !ap_const_lv5_19.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_109.read() == ap_const_lv5_19);
}

void matrix_mult::thread_exitcond_fu_160_p2() {
    exitcond_fu_160_p2 = (!j_reg_131.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_131.read() == ap_const_lv3_5);
}

void matrix_mult::thread_i_1_fu_154_p2() {
    i_1_fu_154_p2 = (!ap_const_lv3_1.is_01() || !ap_phi_mux_i_phi_fu_124_p4.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_1) + sc_biguint<3>(ap_phi_mux_i_phi_fu_124_p4.read()));
}

void matrix_mult::thread_indvar_flatten_next_fu_148_p2() {
    indvar_flatten_next_fu_148_p2 = (!indvar_flatten_reg_109.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(indvar_flatten_reg_109.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void matrix_mult::thread_j_1_fu_182_p2() {
    j_1_fu_182_p2 = (!ap_const_lv3_1.is_01() || !j_mid2_fu_166_p3.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_1) + sc_biguint<3>(j_mid2_fu_166_p3.read()));
}

void matrix_mult::thread_j_mid2_fu_166_p3() {
    j_mid2_fu_166_p3 = (!exitcond_fu_160_p2.read()[0].is_01())? sc_lv<3>(): ((exitcond_fu_160_p2.read()[0].to_bool())? ap_const_lv3_0: j_reg_131.read());
}

void matrix_mult::thread_p_shl_cast_fu_340_p1() {
    p_shl_cast_fu_340_p1 = esl_zext<6,5>(tmp_fu_333_p3.read());
}

void matrix_mult::thread_prod_address0() {
    prod_address0 =  (sc_lv<5>) (tmp_16_cast_fu_363_p1.read());
}

void matrix_mult::thread_prod_ce0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter7.read(), ap_const_logic_1))) {
        prod_ce0 = ap_const_logic_1;
    } else {
        prod_ce0 = ap_const_logic_0;
    }
}

void matrix_mult::thread_prod_d0() {
    prod_d0 = tmp_8_4_reg_516.read();
}

void matrix_mult::thread_prod_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter7.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_388_pp0_iter6_reg.read(), ap_const_lv1_0))) {
        prod_we0 = ap_const_logic_1;
    } else {
        prod_we0 = ap_const_logic_0;
    }
}

void matrix_mult::thread_tmp_14_fu_272_p4() {
    tmp_14_fu_272_p4 = a_q0.read().range(39, 32);
}

void matrix_mult::thread_tmp_15_fu_286_p4() {
    tmp_15_fu_286_p4 = b_q0.read().range(39, 32);
}

void matrix_mult::thread_tmp_16_cast_fu_363_p1() {
    tmp_16_cast_fu_363_p1 = esl_zext<64,6>(tmp_4_reg_511.read());
}

void matrix_mult::thread_tmp_16_fu_204_p1() {
    tmp_16_fu_204_p1 = b_q0.read().range(8-1, 0);
}

void matrix_mult::thread_tmp_1_fu_344_p2() {
    tmp_1_fu_344_p2 = (!p_shl_cast_fu_340_p1.read().is_01() || !tmp_mid2_cast_fu_330_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(p_shl_cast_fu_340_p1.read()) + sc_biguint<6>(tmp_mid2_cast_fu_330_p1.read()));
}

void matrix_mult::thread_tmp_2_cast_fu_350_p1() {
    tmp_2_cast_fu_350_p1 = esl_zext<6,3>(j_mid2_reg_397_pp0_iter5_reg.read());
}

void matrix_mult::thread_tmp_2_fu_192_p1() {
    tmp_2_fu_192_p1 = esl_zext<64,3>(j_mid2_reg_397.read());
}

void matrix_mult::thread_tmp_4_fu_353_p2() {
    tmp_4_fu_353_p2 = (!tmp_2_cast_fu_350_p1.read().is_01() || !tmp_1_fu_344_p2.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_2_cast_fu_350_p1.read()) + sc_biguint<6>(tmp_1_fu_344_p2.read()));
}

void matrix_mult::thread_tmp_6_fu_196_p1() {
    tmp_6_fu_196_p1 = a_q0.read().range(8-1, 0);
}

void matrix_mult::thread_tmp_7_1_fu_306_p0() {
    tmp_7_1_fu_306_p0 = tmp_8_reg_436.read();
}

void matrix_mult::thread_tmp_7_1_fu_306_p1() {
    tmp_7_1_fu_306_p1 = tmp_9_reg_441.read();
}

void matrix_mult::thread_tmp_7_1_fu_306_p2() {
    tmp_7_1_fu_306_p2 = (!tmp_7_1_fu_306_p0.read().is_01() || !tmp_7_1_fu_306_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(tmp_7_1_fu_306_p0.read()) * sc_bigint<8>(tmp_7_1_fu_306_p1.read());
}

void matrix_mult::thread_tmp_7_3_fu_324_p0() {
    tmp_7_3_fu_324_p0 = tmp_12_reg_456.read();
}

void matrix_mult::thread_tmp_7_3_fu_324_p1() {
    tmp_7_3_fu_324_p1 = tmp_13_reg_461.read();
}

void matrix_mult::thread_tmp_7_3_fu_324_p2() {
    tmp_7_3_fu_324_p2 = (!tmp_7_3_fu_324_p0.read().is_01() || !tmp_7_3_fu_324_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(tmp_7_3_fu_324_p0.read()) * sc_bigint<8>(tmp_7_3_fu_324_p1.read());
}

void matrix_mult::thread_tmp_8_4_fu_359_p2() {
    tmp_8_4_fu_359_p2 = (!tmp2_reg_506.read().is_01() || !tmp1_reg_496_pp0_iter5_reg.read().is_01())? sc_lv<16>(): (sc_bigint<16>(tmp2_reg_506.read()) + sc_bigint<16>(tmp1_reg_496_pp0_iter5_reg.read()));
}

void matrix_mult::thread_tmp_fu_333_p3() {
    tmp_fu_333_p3 = esl_concat<3,2>(tmp_mid2_v_reg_403_pp0_iter5_reg.read(), ap_const_lv2_0);
}

void matrix_mult::thread_tmp_mid2_cast_fu_330_p1() {
    tmp_mid2_cast_fu_330_p1 = esl_zext<6,3>(tmp_mid2_v_reg_403_pp0_iter5_reg.read());
}

void matrix_mult::thread_tmp_mid2_fu_188_p1() {
    tmp_mid2_fu_188_p1 = esl_zext<64,3>(tmp_mid2_v_reg_403.read());
}

void matrix_mult::thread_tmp_mid2_v_fu_174_p3() {
    tmp_mid2_v_fu_174_p3 = (!exitcond_fu_160_p2.read()[0].is_01())? sc_lv<3>(): ((exitcond_fu_160_p2.read()[0].to_bool())? i_1_fu_154_p2.read(): ap_phi_mux_i_phi_fu_124_p4.read());
}

void matrix_mult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(exitcond_flatten_fu_142_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter7.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter7.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) || (esl_seteq<1,1,1>(exitcond_flatten_fu_142_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void matrix_mult::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_address0\" :  \"" << b_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_ce0\" :  \"" << b_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_q0\" :  \"" << b_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"prod_address0\" :  \"" << prod_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"prod_ce0\" :  \"" << prod_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"prod_we0\" :  \"" << prod_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"prod_d0\" :  \"" << prod_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

